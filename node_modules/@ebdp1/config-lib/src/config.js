const path = require('path');
const nconf = require('nconf');
const fs = require('fs');

const loadObject = (pathToConfig) => {
  try {
    return JSON.parse(fs.readFileSync(pathToConfig, 'utf-8'));
  } catch (err) {
    return {};
  }
};

/**
 * @class
 * @type {Config}
 * @name Config
 */
class Config {
  constructor() {
    const processDir = process.cwd();
    const env = process.env.NODE_ENV || 'local';

    const configFolderPath = path.join(processDir, './config');
    const configPath = path.join(configFolderPath, 'config.json');

    const defaultConfig = loadObject(configPath);
    defaultConfig.dir = configFolderPath;
    defaultConfig.env = env;

    nconf
      .argv()
      .env({
        separator: '__',
        lowerCase: true,
      })
      .file({
        file: path.join(configFolderPath, 'env', `${env}.json`),
      })
      .defaults(defaultConfig);

    // this.get = nconf.get.bind(nconf);
    this.set = nconf.set.bind(nconf);
  }

  get(key, callback) {
    const value = nconf.get(key, callback);
    const strValue = String(value).toLowerCase().trim();

    if (strValue === 'true') {
      return true;
    }

    if (strValue === 'false') {
      return false;
    }

    return value;
  }

  service(serviceName) {
    const cfg = this.get(`services:${serviceName}`);
    if (!cfg) {
      throw new Error(`Missing ${serviceName} service config`);
    }
    const { host, port, namespace } = cfg;

    const portStr = port ? `:${port}` : '';
    const namespaceStr = namespace && namespace.length ? `/${namespace}` : '';
    cfg.serviceUrl = `${host}${portStr}${namespaceStr}`;
    return cfg;
  }

  database() {
    const cfg = this.get('db');
    if (!cfg) {
      throw new Error('Missing database config');
    }
    const {
      user, password, host, port, postgres,
    } = cfg;

    cfg.databaseUrl = `postgresql://${user}:${password}@${host}:${port}/${postgres}`;

    return cfg;
  }
}

module.exports = Config;
